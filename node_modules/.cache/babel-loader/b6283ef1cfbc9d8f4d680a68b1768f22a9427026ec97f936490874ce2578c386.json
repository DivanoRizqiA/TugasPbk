{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"canvas-container\"\n};\nvar _hoisted_2 = {\n  ref: \"canvas\"\n};\nvar _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nvar _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]), _hoisted_3, _hoisted_4, _hoisted_5]);\n}","map":{"version":3,"names":["ref","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5"],"sources":["D:\\folder penting\\portfolio-vue-main\\src\\components\\object\\Cylindre.vue"],"sourcesContent":["<template>\n  <div>\n      <div class=\"canvas-container\">\n    <canvas ref=\"canvas\"></canvas>\n  </div>\n  <br>\n  <br>\n  <br>\n  </div>\n</template>\n\n\n<script>\nimport * as THREE from 'three';\n\nimport arch from '../../assets/distro/arch.png';\nimport debian from '../../assets/distro/debian.png';\nimport fedora from '../../assets/distro/fedora.png';\nimport kali from '../../assets/distro/kali.png';\nimport mageia from '../../assets/distro/mageia.png';\nimport manjaro from '../../assets/distro/manjaro.png';\nimport nixos from '../../assets/distro/nixos.png';\nimport popos from '../../assets/distro/popos.png';\nimport redhat from '../../assets/distro/redhat.png';\nimport ubuntu from '../../assets/distro/ubuntu.jpg';\n\n\n\nexport default {\n  name : \"Cylindre\",\n  components: {\n  },\n  props : {\n      Textid : {\n          type : String,\n          required : true\n      }\n\n  },\n  data(){\n    return {\n      getTexture(){\n        if(this.Textid == \"arch\"){\n          return arch;\n        }\n        else if(this.Textid == \"debian\"){\n          return debian;\n        }\n        else if(this.Textid == \"fedora\"){\n          return fedora;\n        }\n        else if(this.Textid == \"kali\"){\n          return kali;\n        }\n        else if(this.Textid == \"mageia\"){\n          return mageia;\n        }\n        else if(this.Textid == \"manjaro\"){\n          return manjaro;\n        }\n        else if(this.Textid == \"nixos\"){\n          return nixos;\n        }\n        else if(this.Textid == \"popos\"){\n          return popos;\n        }\n        else if(this.Textid == \"redhat\"){\n          return redhat;\n        }\n        else if(this.Textid == \"ubuntu\"){\n          return ubuntu;\n        }\n\n        \n      }\n    }\n  },\n  mounted() {\n\n\n\nconst canvas = this.$refs.canvas;\nconst container = canvas.parentNode;\nconst width = container.clientWidth - 10;\nconst height = container.clientHeight;\n// Création de la scène\n// Création de la scène\nconst scene = new THREE.Scene();\n\n\n// Création de la caméra\nconst camera = new THREE.PerspectiveCamera(75, (width) / height, 0.1, 1000);\ncamera.position.z = 5\n\n// Création du rendu\nconst renderer = new THREE.WebGLRenderer({ canvas: this.$refs.canvas , alpha: true})\nrenderer.setSize(width, height);\n//renderer.setClearColor(0x000000)\n//scene.background.alpha = 0;\n// Création du cube avec une texture personnalisée\nconst textureLoader = new THREE.TextureLoader()\nconst texture = textureLoader.load(this.getTexture())\n\nconst geometry = new THREE.CylinderGeometry( 2, 2, 4, 32 );\n//const geometry = new THREE.PlaneGeometry( 6, 6 );\nconst material = new THREE.MeshBasicMaterial({ map: texture , alphaTest : 1})\nmaterial.alphaTest = 1;\nconst cylindre = new THREE.Mesh(geometry, material)\nscene.add(cylindre)\n\n\nconst light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(0, 1, 1).normalize();\nscene.add(light);\n\n\n// Animation de la scène\nvar startTime = Date.now(); // Ajouter cette ligne avant la fonction animate\n\nconst animate = function () {\n  requestAnimationFrame(animate);\n\n  const elapsedTime = Date.now() - startTime;\n  let angle = ((elapsedTime - 8000) / 8000) * Math.PI * 2.5 + Math.PI * 1.75;\n  \n\n  cylindre.rotation.y = angle;\n  cylindre.rotation.x = 0;\n  cylindre.rotation.z = 0;\n\n  renderer.render(scene, camera);\n};\n\n\n\n\nanimate();\n}\n\n,\n};\n</script>\n\n<style>\n  canvas {\n    width: 100%;\n    height: 100%;\n    display: block;\n  }\n\n  .canvas-container {\nflex: 1;\naspect-ratio: 1/-1;\nbackground: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(141,141,193,1) 0%, rgba(120,144,217,1) 32%, rgba(95,193,225,1) 66%, rgba(50,65,239,1) 100%, rgba(0,212,255,1) 100%); \n\n}\n\n</style>\n"],"mappings":";;EAEW,SAAM;AAAkB;;EACvBA,GAAG,EAAC;AAAQ;8BAEtBC,mBAAA,CAAI;8BACJA,mBAAA,CAAI;8BACJA,mBAAA,CAAI;;;uBANJC,mBAAA,CAOM,cANFD,mBAAA,CAEE,OAFFE,UAEE,GADJF,mBAAA,CAA8B,UAA9BG,UAA8B,8B,GAEhCC,UAAI,EACJC,UAAI,EACJC,UAAI,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}