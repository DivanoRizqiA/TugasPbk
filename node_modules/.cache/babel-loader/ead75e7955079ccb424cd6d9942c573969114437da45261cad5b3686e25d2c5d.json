{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["D:\\folder penting\\portfolio-vue-main\\src\\components\\object\\Cone.vue"],"sourcesContent":["<template>\n  <div>\n\n  </div>\n</template>\n<script>\nimport * as THREE from 'three';\n\n\nimport c from '../../assets/skills/c.png'\nimport cpp from '../../assets/skills/cpp.png'\nimport csharp from '../../assets/skills/csharp.png'\nimport python from '../../assets/skills/python.png'\nimport ocaml from '../../assets/skills/ocaml.png'\nimport git from '../../assets/skills/git.png'\nimport unix from '../../assets/skills/unix.png'\nimport electron from '../../assets/skills/electron.png'\nimport docker from '../../assets/skills/docker.png'\n\nimport html from '../../assets/skills/html.png'\nimport css from '../../assets/skills/css.png'\nimport js from '../../assets/skills/js.png'\nimport bootstrap from '../../assets/skills/bootstrap.png'\nimport vue3 from '../../assets/skills/vue3.png'\n\n\nimport mariadb from '../../assets/skills/mariadb.png'\nimport mysql from '../../assets/skills/mysql.png'\nimport nodejs from '../../assets/skills/nodejs.jpg'\nimport php from '../../assets/skills/php.png'\n\n\nimport virtualbox from '../../assets/skills/virtualbox.png'\nimport vmware from '../../assets/skills/vmware.jpg'\nimport oraclecloud from '../../assets/skills/oraclecloud.jpg'\n\n\nimport latex from '../../assets/skills/latex.png'\nimport markdown from '../../assets/skills/markdown.png'\nimport obsidian from '../../assets/skills/obsidian.png'\nimport notion from '../../assets/skills/notion.png'\n\nimport blender from '../../assets/skills/blender.png'\nimport photoshop from '../../assets/skills/photoshop.jpg'\nimport unity from '../../assets/skills/unity.jpg'\n\nimport numpy from '../../assets/skills/numpy.png'\nimport vs from '../../assets/skills/vs.jpg'\n\nimport wordpress from '../../assets/skills/wordpress.jpg'\nimport office from '../../assets/skills/office.png'\nimport threejs from '../../assets/skills/threejs.png'\nimport uml from '../../assets/skills/uml.png'\n// blender\nexport default {\n  name : \"Circle\",\n  components: {\n  },\n  props : {\n      Textid : {\n          type : String,\n          required : true\n      }\n\n  },\n  data(){\n    return {\n      getTexture(){\n        if(this.Textid == \"chartreux\"){\n          return chartreux;\n        }\n        else if(this.Textid == \"epita\"){\n          return epita;\n        }\n        else if(this.Textid == \"school42\"){\n          return school42;\n        }\n        else if(this.Textid == \"rouviere\"){\n          return rouviere;\n        }\n        else if(this.Textid == \"c\"){\n          return c;\n        }\n        else if(this.Textid == \"cpp\"){\n          return cpp;\n        }\n        else if(this.Textid == \"csharp\"){\n          return csharp;\n        }\n        else if(this.Textid == \"python\"){\n          return python;\n        }\n        else if(this.Textid == \"ocaml\"){\n          return ocaml;\n        }\n        else if(this.Textid == \"git\"){\n          return git;\n        }\n        else if(this.Textid == \"unix\"){\n          return unix;\n        }\n        else if(this.Textid == \"electron\"){\n          return electron;\n        }\n        else if(this.Textid == \"html\"){\n          return html;\n        }\n        else if(this.Textid == \"css\"){\n          return css;\n        }\n        else if(this.Textid == \"js\"){\n          return js;\n        }\n        else if(this.Textid == \"bootstrap\"){\n          return bootstrap;\n        }\n        else if(this.Textid == \"vue3\"){\n          return vue3;\n        }\n        else if(this.Textid == \"mariadb\"){\n          return mariadb;\n        }\n        else if(this.Textid == \"mysql\"){\n          return mysql;\n        }\n        else if(this.Textid == \"nodejs\"){\n          return nodejs;\n        }\n        else if(this.Textid == \"php\"){\n          return php;\n        }\n        else if(this.Textid == \"docker\"){\n          return docker;\n        }\n        else if(this.Textid == \"virtualbox\"){\n          return virtualbox;\n        }\n        else if(this.Textid == \"vmware\"){\n          return vmware;\n        }\n        else if(this.Textid == \"oraclecloud\"){\n          return oraclecloud;\n        }\n        else if(this.Textid == \"latex\"){\n          return latex;\n        }\n        else if(this.Textid == \"markdown\"){\n          return markdown;\n        }\n        else if(this.Textid == \"obsidian\"){\n          return obsidian;\n        }\n        else if(this.Textid == \"notion\"){\n          return notion;\n        }\n        else if(this.Textid == \"blender\"){\n          return blender;\n        }\n        else if(this.Textid == \"photoshop\"){\n          return photoshop;\n        }\n        else if(this.Textid == \"unity\"){\n          return unity;\n        }\n        else if(this.Textid == \"numpy\"){\n          return numpy;\n        }\n        else if(this.Textid == \"vs\"){\n          return vs;\n        }\n        else if(this.Textid == \"wordpress\"){\n          return wordpress;\n        }\n        else if(this.Textid == \"office\"){\n          return office;\n        }\n        else if(this.Textid == \"threejs\"){\n          return threejs;\n        }\n        else if(this.Textid == \"uml\"){\n          return uml;\n        }\n      }\n    }\n  },\n  mounted() {\n\n\n\nconst canvas = this.$refs.canvas;\nconst container = canvas.parentNode;\nconst width = container.clientWidth - 10;\nconst height = container.clientHeight;\n// Création de la scène\n// Création de la scène\nconst scene = new THREE.Scene();\n\n\n// Création de la caméra\nconst camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\ncamera.position.z = 5\n\n// Création du rendu\nconst renderer = new THREE.WebGLRenderer({ canvas: this.$refs.canvas , alpha: true})\nrenderer.setSize(width, height);\n//renderer.setClearColor(0x000000)\n//scene.background.alpha = 0;\n// Création du cercle avec une texture personnalisée\n\n\nconst textureLoader = new THREE.TextureLoader()\nconst texture = textureLoader.load(this.getTexture())\n\n\nconst geometry = new THREE.CircleGeometry( 3, 128 );\nconst material = new THREE.MeshBasicMaterial( { map: texture , alphaTest : 1} );\nconst circle = new THREE.Mesh( geometry, material );\nscene.add( circle );\n\n\n\n\nconst light = new THREE.DirectionalLight(0xffffff, 1);\nlight.position.set(0, 1, 1).normalize();\nscene.add(light);\n\n// Animation de la scène\nvar startTime = Date.now(); // Ajouter cette ligne avant la fonction animate\n\nconst animate = function () {\n  requestAnimationFrame(animate);\n\n  const elapsedTime = Date.now() - startTime;\n  let angle;\n\n  if (elapsedTime < 1500) {\n    angle = (elapsedTime / 12000) * Math.PI * 2;\n  } else if (elapsedTime < 6000) {\n    angle = ((elapsedTime - 1500) / 2000) * Math.PI * 1.25 + Math.PI * 0.5;\n  } else {\n    angle = ((elapsedTime - 4200) / 4200) * Math.PI * 2.5 + Math.PI * 1.75;\n  }\n\n  circle.rotation.y = angle;\n  circle.rotation.x = 0;\n  circle.rotation.z = 0;\n\n  renderer.render(scene, camera);\n};\n\n\n\n\nanimate();\n}\n\n};\n</script>\n\n<style>\n  canvas {\n    width: 100%;\n    height: 100%;\n    display: block;\n  }\n\n  .canvas-container {\nflex: 1;\nwidth: 100%;\naspect-ratio: 1/-1;\npadding-bottom: -70%; \nbackground: rgba(0,0,0,0.000000000000000000001);\nopacity: 1;\n}\n\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAEM"},"metadata":{},"sourceType":"module","externalDependencies":[]}